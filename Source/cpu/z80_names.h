
const char *z80_instruction_name[256] = {
    "nop",       "ld bc,**",  "ld (bc),a",  "inc bc",    "inc b",      "dec b",     "ld b,*",     "rlca",
    "ex af,af'", "add hl,bc", "ld a,(bc)",  "dec bc",    "inc c",      "dec c",     "ld c,*",     "rrca",
    "djnz *",    "ld de,**",  "ld (de),a",  "inc de",    "inc d",      "dec d",     "ld d,*",     "rla",
    "jr *",      "add hl,de", "ld a,(de)",  "dec de",    "inc e",      "dec e",     "ld e,*",     "rra",
    "jr nz,*",   "ld hl,**",  "ld (**),hl", "inc hl",    "inc h",      "dec h",     "ld h,*",     "daa",
    "jr z,*",    "add hl,hl", "ld hl,(**)", "dec hl",    "inc l",      "dec l",     "ld l,*",     "cpl",
    "jr nc,*",   "ld sp,**",  "ld (**),a",  "inc sp",    "inc (hl)",   "dec (hl)",  "ld (hl),*",  "scf",
    "jr c,*",    "add hl,sp", "ld a,(**)",  "dec sp",    "inc a",      "dec a",     "ld a,*",     "ccf",
    "ld b,b",    "ld b,c",    "ld b,d",     "ld b,e",    "ld b,h",     "ld b,l",    "ld b,(hl)",  "ld b,a",
    "ld c,b",    "ld c,c",    "ld c,d",     "ld c,e",    "ld c,h",     "ld c,l",    "ld c,(hl)",  "ld c,a",
    "ld d,b",    "ld d,c",    "ld d,d",     "ld d,e",    "ld d,h",     "ld d,l",    "ld d,(hl)",  "ld d,a",
    "ld e,b",    "ld e,c",    "ld e,d",     "ld e,e",    "ld e,h",     "ld e,l",    "ld e,(hl)",  "ld e,a",
    "ld h,b",    "ld h,c",    "ld h,d",     "ld h,e",    "ld h,h",     "ld h,l",    "ld h,(hl)",  "ld h,a",
    "ld l,b",    "ld l,c",    "ld l,d",     "ld l,e",    "ld l,h",     "ld l,l",    "ld l,(hl)",  "ld l,a",
    "ld (hl),b", "ld (hl),c", "ld (hl),d",  "ld (hl),e", "ld (hl),h",  "ld (hl),l", "halt",       "ld (hl),a",
    "ld a,b",    "ld a,c",    "ld a,d",     "ld a,e",    "ld a,h",     "ld a,l",    "ld a,(hl)",  "ld a,a",
    "add a,b",   "add a,c",   "add a,d",    "add a,e",   "add a,h",    "add a,l",   "add a,(hl)", "add a,a",
    "adc a,b",   "adc a,c",   "adc a,d",    "adc a,e",   "adc a,h",    "adc a,l",   "adc a,(hl)", "adc a,a",
    "sub a,b",   "sub a,c",   "sub a,d",    "sub a,e",   "sub a,h",    "sub a,l",   "sub a,(hl)", "sub a,a",
    "sbc a,b",   "sbc a,c",   "sbc a,d",    "sbc a,e",   "sbc a,h",    "sbc a,l",   "sbc a,(hl)", "sbc a,a",
    "and a,b",   "and a,c",   "and a,d",    "and a,e",   "and a,h",    "and a,l",   "and a,(hl)", "and a,a ",
    "xor a,b",   "xor a,c",   "xor a,d",    "xor a,e",   "xor a,h",    "xor a,l",   "xor a,(hl)", "xor a,a",
    "or a,b",    "or a,c",    "or a,d",     "or a,e",    "or a,h",     "or a,l",    "or a,(hl)",  "or a,a",
    "cp a,b",    "cp a,c",    "cp a,d",     "cp a,e",    "cp a,h",     "cp a,l",    "cp a,(hl)",  "cp a,a",
    "ret nz",    "pop bc",    "jp nz,**",   "jp **",     "call nz,**", "push bc",   "add a,*",    "rst 00h",
    "ret z",     "ret",       "jp z,**",    "Bit",       "call z,**",  "call **",   "adc a,*",    "rst 08h",
    "ret nc",    "pop de",    "jp nc,**",   "out (*),a", "call nc,**", "push de",   "sub a,*",    "rst 10h",
    "ret c",     "exx",       "jp c,**",    "in a,(*)",  "call c,**",  "IX",        "sbc a,*",    "rst 18h",
    "ret po",    "pop hl",    "jp po,**",   "ex (sp),hl","call po,**", "push hl",   "and a,*",    "rst 20h",
    "ret pe",    "jp (hl)",   "jp pe,**",   "ex de,hl",  "call pe,**", "Ext",       "xor a,*",    "rst 28h",
    "ret p",     "pop af",    "jp p,**",    "di",        "call p,**",  "push af",   "or a,*",     "rst 30h",
    "ret m",     "ld sp,hl",  "jp m,**",    "ei",        "call m,**",  "IY",        "cp a,*",     "rst 38h",
};
